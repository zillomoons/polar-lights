{"version":3,"sources":["components/Common/FormsControls/FormsControls.js","components/Common/FormsControls/FormsControls.module.css","utilities/validators.js","components/Dialogs/Dialogs.module.css","components/Dialogs/Message/Messages.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["FormControl","input","meta","props","hasError","touched","error","className","styles","children","Textarea","restProps","child","module","exports","required","value","maxLengthCreator","maxLength","length","DialogItem","path","id","s","dialog","src","photo","to","name","Message","message","maxLength50","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","placeholder","validate","Dialogs","dialogsElements","dialogsPage","dialogs","map","d","key","messagesElements","messages","m","NavbarContainer","dialogItem","values","addMessage","newMessageBody","compose","connect","state","withAuthRedirect"],"mappings":"2MAIMA,EAAc,SAAC,GAA8B,EAA5BC,MAA6B,IAAtBC,EAAqB,EAArBA,KAASC,EAAY,gCACzCC,EAAWF,EAAKG,SAAWH,EAAKI,MACtC,OACI,yBAAKC,UAAWH,EAAWI,IAAOF,MAAQ,IACtC,6BACKH,EAAMM,UAETL,GAAY,8BAAOF,EAAKI,SAKzBI,EAAW,SAACP,GAAW,IACxBF,EAAqCE,EAArCF,MAAuBU,GAAcR,EAA9BD,KAA8BC,EAAxBS,MADU,YACcT,EADd,2BAE/B,OAAO,kBAACH,EAAgBG,EAAO,8CAAcF,EAAWU,O,oBCjB5DE,EAAOC,QAAU,CAAC,MAAQ,6BAA6B,WAAa,oC,iCCDpE,oEAAO,IAAMC,EAAW,SAAAC,GACpB,IAAIA,EAEJ,MAAO,2BAGEC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAC5C,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,oBCNlCL,EAAOC,QAAU,CAAC,QAAU,yBAAyB,WAAa,8B,oBCAlED,EAAOC,QAAU,CAAC,QAAU,4B,+FCcbM,EAXI,SAACjB,GAChB,IAAIkB,EAAO,YAAclB,EAAMmB,GAC/B,OACI,yBAAKf,UAAWgB,IAAEC,QACd,yBAAKC,IAAKtB,EAAMuB,QAChB,kBAAC,IAAD,CAASC,GAAIN,GAAOlB,EAAMyB,Q,kBCGvBC,EATC,SAAC1B,GACb,OACI,yBAAKI,UAAWgB,IAAEO,SACT3B,EAAM2B,U,4CCGjBC,EAAcd,YAAiB,IAe/Be,EAAsBC,YAAU,CAClCC,KAAM,yBADkBD,EAbL,SAAC9B,GACpB,OACI,0BAAMgC,SAAUhC,EAAMiC,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAW5B,IAAUkB,KAAK,iBAAiBW,YAAY,qBAC1DC,SAAU,CAACzB,IAAUgB,MAE7B,6BACI,6CAsCDU,EA7BC,SAACtC,GACb,IAAIuC,EACAvC,EAAMwC,YAAYC,QAAQC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAYlB,KAAMkB,EAAElB,KAAMmB,IAAKD,EAAExB,GAAIA,GAAIwB,EAAExB,GAAII,MAAOoB,EAAEpB,WAC3FsB,EACA7C,EAAMwC,YAAYM,SAASJ,KAAI,SAAAK,GAAC,OAAI,kBAAC,EAAD,CAASpB,QAASoB,EAAEpB,QAASiB,IAAKG,EAAE5B,GAAIA,GAAI4B,EAAE5B,QAMtF,OACI,oCACI,kBAAC6B,EAAA,EAAD,MACA,yBAAK5C,UAAWgB,IAAEqB,SAEd,yBAAKrC,UAAWgB,IAAE6B,YACbV,GAEL,yBAAKnC,UAAWgB,IAAE0B,UACd,6BACKD,IAGT,kBAAChB,EAAD,CAAqBG,SAjBb,SAACkB,GACjBlD,EAAMmD,WAAWD,EAAOE,sB,yBCtBjBC,sBACXC,aAPkB,SAACC,GACnB,MAAO,CACHf,YAAae,EAAMf,eAKE,CAAEW,iBAC3BK,IAFWH,CAGbf","file":"static/js/5.ea4f36a0.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Field } from 'redux-form';\r\nimport styles from './FormsControls.module.css'\r\n\r\nconst FormControl = ({ input, meta, ...props }) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={hasError ? styles.error : ''}>\r\n            <div>\r\n                {props.children}\r\n            </div>\r\n            { hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props) => {\r\n    const { input, meta, child, ...restProps } = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\r\n}\r\nexport const Input = (props) => {\r\n    const { input, meta, child, ...restProps } = props;\r\n    return <FormControl {...props} ><input {...input} {...restProps} /></FormControl>\r\n}\r\nexport const createField = (placeholder, name, validators, component, props = {}, text = '') => {\r\n    return <div>\r\n        <Field placeholder={placeholder} name={name}\r\n            validate={validators}\r\n            component={component}\r\n            {...props} /> {text}\r\n    </div>\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"FormsControls_error__3VyXk\",\"loginError\":\"FormsControls_loginError__2qVlW\"};","export const required = value => {\r\n    if (value) return undefined;\r\n\r\n    return \"This field is requiered\";\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__12Muv\",\"dialogItem\":\"Dialogs_dialogItem__3ynBY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Messages_message__1QAxb\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    let path = '/dialogs/' + props.id;\r\n    return (\r\n        <div className={s.dialog}>\r\n            <img src={props.photo} />\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './Messages.module.css'\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={s.message} >\r\n                {props.message}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator, required } from '../../utilities/validators';\r\nimport { Textarea } from '../Common/FormsControls/FormsControls';\r\nimport NavbarContainer from '../Navbar/NavbarContainer';\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst addMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name=\"newMessageBody\" placeholder='Enter your message'\r\n                    validate={[required, maxLength50]} />\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst AddMessageReduxForm = reduxForm({\r\n    form: \"DialogsAddMessageForm\"\r\n})(addMessageForm)\r\n\r\nconst Dialogs = (props) => {\r\n    let dialogsElements =\r\n        props.dialogsPage.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id} photo={d.photo} />);\r\n    let messagesElements =\r\n        props.dialogsPage.messages.map(m => <Message message={m.message} key={m.id} id={m.id} />);\r\n\r\n    let addNewMessage = (values) => {\r\n        props.addMessage(values.newMessageBody);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <NavbarContainer />\r\n            <div className={s.dialogs}>\r\n\r\n                <div className={s.dialogItem}>\r\n                    {dialogsElements}\r\n                </div>\r\n                <div className={s.messages}>\r\n                    <div>\r\n                        {messagesElements}\r\n                    </div>\r\n                </div>\r\n                <AddMessageReduxForm onSubmit={addNewMessage} />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport { addMessage } from \"../../redux/dialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { connect } from \"react-redux\";\r\nimport { withAuthRedirect } from '../../hoc/AuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, { addMessage }),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\n// const DialogsContainer = () => {\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             { (store) => {\r\n//                 let state = store.getState();\r\n//                 let addMessage = () => {\r\n//                     store.dispatch(addMessageActionCreator());\r\n//                 };\r\n//                 let onMessageChange = (text) => {\r\n//                     store.dispatch(updateNewMessageTextActionCreator(text))\r\n//                 };\r\n//                 return <Dialogs state={state} addMessage={addMessage}\r\n//                                 updateNewMessageText={onMessageChange}/>\r\n//             }\r\n//             }\r\n//         </StoreContext.Consumer>\r\n//     );\r\n// }\r\n"],"sourceRoot":""}